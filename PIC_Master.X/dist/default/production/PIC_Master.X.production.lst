

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 23 16:26:16 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 2.20
    26                           ; Generated 12/02/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F887 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  0088                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  008F                     	;# 
   104  0090                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  009F                     	;# 
   122  0105                     	;# 
   123  0107                     	;# 
   124  0108                     	;# 
   125  0109                     	;# 
   126  010C                     	;# 
   127  010C                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  010F                     	;# 
   131  0185                     	;# 
   132  0187                     	;# 
   133  0188                     	;# 
   134  0189                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0008                     	;# 
   146  0009                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000D                     	;# 
   151  000E                     	;# 
   152  000E                     	;# 
   153  000F                     	;# 
   154  0010                     	;# 
   155  0011                     	;# 
   156  0012                     	;# 
   157  0013                     	;# 
   158  0014                     	;# 
   159  0015                     	;# 
   160  0015                     	;# 
   161  0016                     	;# 
   162  0017                     	;# 
   163  0018                     	;# 
   164  0019                     	;# 
   165  001A                     	;# 
   166  001B                     	;# 
   167  001B                     	;# 
   168  001C                     	;# 
   169  001D                     	;# 
   170  001E                     	;# 
   171  001F                     	;# 
   172  0081                     	;# 
   173  0085                     	;# 
   174  0086                     	;# 
   175  0087                     	;# 
   176  0088                     	;# 
   177  0089                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  008F                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  009F                     	;# 
   200  0105                     	;# 
   201  0107                     	;# 
   202  0108                     	;# 
   203  0109                     	;# 
   204  010C                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  010F                     	;# 
   209  0185                     	;# 
   210  0187                     	;# 
   211  0188                     	;# 
   212  0189                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0008                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0088                     	;# 
   255  0089                     	;# 
   256  008C                     	;# 
   257  008D                     	;# 
   258  008E                     	;# 
   259  008F                     	;# 
   260  0090                     	;# 
   261  0091                     	;# 
   262  0092                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0093                     	;# 
   266  0094                     	;# 
   267  0095                     	;# 
   268  0096                     	;# 
   269  0097                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009A                     	;# 
   273  009B                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009E                     	;# 
   277  009F                     	;# 
   278  0105                     	;# 
   279  0107                     	;# 
   280  0108                     	;# 
   281  0109                     	;# 
   282  010C                     	;# 
   283  010C                     	;# 
   284  010D                     	;# 
   285  010E                     	;# 
   286  010F                     	;# 
   287  0185                     	;# 
   288  0187                     	;# 
   289  0188                     	;# 
   290  0189                     	;# 
   291  018C                     	;# 
   292  018D                     	;# 
   293  0013                     _SSPBUF	set	19
   294  0014                     _SSPCON	set	20
   295  000B                     _INTCONbits	set	11
   296  0009                     _PORTE	set	9
   297  0008                     _PORTD	set	8
   298  0007                     _PORTC	set	7
   299  0005                     _PORTA	set	5
   300  0006                     _PORTB	set	6
   301  0007                     _PORTCbits	set	7
   302  0043                     _RD3	set	67
   303  0042                     _RD2	set	66
   304  0047                     _RD7	set	71
   305  0046                     _RD6	set	70
   306  0045                     _RD5	set	69
   307  0044                     _RD4	set	68
   308  0094                     _SSPSTATbits	set	148
   309  0094                     _SSPSTAT	set	148
   310  0089                     _TRISE	set	137
   311  0088                     _TRISD	set	136
   312  0087                     _TRISCbits	set	135
   313  0087                     _TRISC	set	135
   314  0086                     _TRISB	set	134
   315  0085                     _TRISA	set	133
   316  043B                     _TRISC3	set	1083
   317  043D                     _TRISC5	set	1085
   318  0189                     _ANSELH	set	393
   319  0188                     _ANSEL	set	392
   320                           
   321                           	psect	strings
   322  0003                     __pstrings:
   323  0003                     stringtab:
   324  0003                     __stringtab:
   325  0003                     stringcode:	
   326                           ;	String table - string pointers are 1 byte each
   327                           
   328  0003                     stringdir:
   329  0003  3000               	movlw	high stringdir
   330  0004  008A               	movwf	10
   331  0005  0804               	movf	4,w
   332  0006  0A84               	incf	4,f
   333  0007  0782               	addwf	2,f
   334  0008                     __stringbase:
   335  0008  3400               	retlw	0
   336  0009                     __end_of__stringtab:
   337  0009                     STR_1:
   338  0009  3453               	retlw	83	;'S'
   339  000A  3431               	retlw	49	;'1'
   340  000B  343A               	retlw	58	;':'
   341  000C  3400               	retlw	0
   342  000D                     STR_2:
   343  000D  3453               	retlw	83	;'S'
   344  000E  3432               	retlw	50	;'2'
   345  000F  343A               	retlw	58	;':'
   346  0010  3400               	retlw	0
   347  0011                     STR_3:
   348  0011  3453               	retlw	83	;'S'
   349  0012  3433               	retlw	51	;'3'
   350  0013  343A               	retlw	58	;':'
   351  0014  3400               	retlw	0
   352                           
   353                           	psect	cinit
   354  07F2                     start_initialization:	
   355                           ; #config settings
   356                           
   357  07F2                     __initialization:
   358                           
   359                           ; Clear objects allocated to COMMON
   360  07F2  01FD               	clrf	__pbssCOMMON& (0+127)
   361                           
   362                           ; Clear objects allocated to BANK0
   363  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   364  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   365  07F5  01A0               	clrf	__pbssBANK0& (0+127)
   366  07F6  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   367  07F7  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   368  07F8  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   369  07F9  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   370  07FA  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   371  07FB  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   372  07FC                     end_of_initialization:	
   373                           ;End of C runtime variable initialization code
   374                           
   375  07FC                     __end_of__initialization:
   376  07FC  0183               	clrf	3
   377  07FD  120A  118A  2F3B   	ljmp	_main	;jump to C main() function
   378                           
   379                           	psect	bssCOMMON
   380  007D                     __pbssCOMMON:
   381  007D                     _contador:
   382  007D                     	ds	1
   383                           
   384                           	psect	bssBANK0
   385  0020                     __pbssBANK0:
   386  0020                     _t:
   387  0020                     	ds	2
   388  0022                     _S1:
   389  0022                     	ds	2
   390  0024                     _slave3:
   391  0024                     	ds	1
   392  0025                     _slave2:
   393  0025                     	ds	1
   394  0026                     _slave1:
   395  0026                     	ds	1
   396                           
   397                           	psect	cstackCOMMON
   398  0070                     __pcstackCOMMON:
   399  0070                     ?_setup:
   400  0070                     ?_spiWrite:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ??_spiWrite:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_spiRead:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ??_spiRead:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_spiInit:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_Lcd_Port:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ??_Lcd_Port:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_Lcd_Cmd:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_Lcd_Init:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_Lcd_Write_Char:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_Lcd_Write_String:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_main:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?_spiReceiveWait:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ??_spiReceiveWait:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ?_Lcd_Clear:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     Lcd_Port@a:	
   446                           ; 2 bytes @ 0x0
   447                           
   448  0070                     spiInit@sDataSample:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     spiWrite@dat:	
   452                           ; 1 bytes @ 0x0
   453                           
   454                           
   455                           ; 1 bytes @ 0x0
   456  0070                     	ds	1
   457  0071                     ??_Lcd_Cmd:
   458  0071                     ??_Lcd_Write_Char:	
   459                           ; 1 bytes @ 0x1
   460                           
   461  0071                     spiInit@sClockIdle:	
   462                           ; 1 bytes @ 0x1
   463                           
   464                           
   465                           ; 1 bytes @ 0x1
   466  0071                     	ds	1
   467  0072                     Lcd_Write_Char@temp:
   468  0072                     spiInit@sTransmitEdge:	
   469                           ; 1 bytes @ 0x2
   470                           
   471                           
   472                           ; 1 bytes @ 0x2
   473  0072                     	ds	1
   474  0073                     ??_spiInit:
   475  0073                     Lcd_Cmd@a:	
   476                           ; 1 bytes @ 0x3
   477                           
   478  0073                     Lcd_Write_Char@y:	
   479                           ; 1 bytes @ 0x3
   480                           
   481  0073                     spiInit@sType:	
   482                           ; 1 bytes @ 0x3
   483                           
   484                           
   485                           ; 1 bytes @ 0x3
   486  0073                     	ds	1
   487  0074                     ??_setup:
   488  0074                     ??_Lcd_Clear:	
   489                           ; 1 bytes @ 0x4
   490                           
   491  0074                     ?_Lcd_Set_Cursor:	
   492                           ; 1 bytes @ 0x4
   493                           
   494  0074                     ??_Lcd_Init:	
   495                           ; 1 bytes @ 0x4
   496                           
   497  0074                     Lcd_Set_Cursor@b:	
   498                           ; 1 bytes @ 0x4
   499                           
   500  0074                     Lcd_Write_Char@a:	
   501                           ; 1 bytes @ 0x4
   502                           
   503                           
   504                           ; 1 bytes @ 0x4
   505  0074                     	ds	1
   506  0075                     ??_Lcd_Set_Cursor:
   507  0075                     ??_Lcd_Write_String:	
   508                           ; 1 bytes @ 0x5
   509                           
   510  0075                     Lcd_Write_String@i:	
   511                           ; 1 bytes @ 0x5
   512                           
   513                           
   514                           ; 2 bytes @ 0x5
   515  0075                     	ds	2
   516  0077                     Lcd_Set_Cursor@a:
   517  0077                     Lcd_Write_String@a:	
   518                           ; 1 bytes @ 0x7
   519                           
   520                           
   521                           ; 1 bytes @ 0x7
   522  0077                     	ds	1
   523  0078                     Lcd_Set_Cursor@z:
   524                           
   525                           ; 1 bytes @ 0x8
   526  0078                     	ds	1
   527  0079                     Lcd_Set_Cursor@y:
   528                           
   529                           ; 1 bytes @ 0x9
   530  0079                     	ds	1
   531  007A                     Lcd_Set_Cursor@temp:
   532                           
   533                           ; 1 bytes @ 0xA
   534  007A                     	ds	1
   535  007B                     ??_main:
   536                           
   537                           ; 1 bytes @ 0xB
   538  007B                     	ds	2
   539                           
   540                           	psect	maintext
   541  073B                     __pmaintext:	
   542 ;;
   543 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   544 ;;
   545 ;; *************** function _main *****************
   546 ;; Defined at:
   547 ;;		line 46 in file "PIC_Master.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   556 ;; Tracked objects:
   557 ;;		On entry : B00/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   561 ;;      Params:         0       0       0       0       0
   562 ;;      Locals:         0       0       0       0       0
   563 ;;      Temps:          2       0       0       0       0
   564 ;;      Totals:         2       0       0       0       0
   565 ;;Total ram usage:        2 bytes
   566 ;; Hardware stack levels required when called:    3
   567 ;; This function calls:
   568 ;;		_Lcd_Clear
   569 ;;		_Lcd_Init
   570 ;;		_Lcd_Set_Cursor
   571 ;;		_Lcd_Write_String
   572 ;;		_setup
   573 ;;		_spiRead
   574 ;;		_spiWrite
   575 ;; This function is called by:
   576 ;;		Startup code after reset
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           
   581                           ;psect for function _main
   582  073B                     _main:
   583  073B                     l1070:	
   584                           ;incstack = 0
   585                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   586                           
   587                           
   588                           ;PIC_Master.c: 47:         spiWrite(1);
   589  073B  120A  118A  261F  120A  118A  	fcall	_setup
   590                           
   591                           ;PIC_Master.c: 48:         slave3 = spiRead();
   592  0740  120A  118A  26DE  120A  118A  	fcall	_Lcd_Init
   593                           
   594                           ;PIC_Master.c: 49: 
   595  0745  120A  118A  259B  120A  118A  	fcall	_Lcd_Clear
   596                           
   597                           ;PIC_Master.c: 51:         PORTCbits.RC0 = 1;
   598  074A  01F4               	clrf	Lcd_Set_Cursor@b
   599  074B  0AF4               	incf	Lcd_Set_Cursor@b,f
   600  074C  3001               	movlw	1
   601  074D  120A  118A  268C  120A  118A  	fcall	_Lcd_Set_Cursor
   602  0752                     l1072:
   603                           
   604                           ;PIC_Master.c: 52: 
   605  0752  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   606  0753  120A  118A  25FA  120A  118A  	fcall	_Lcd_Write_String
   607  0758                     l1074:
   608                           
   609                           ;PIC_Master.c: 53: 
   610  0758  3008               	movlw	8
   611  0759  00FB               	movwf	??_main
   612  075A  087B               	movf	??_main,w
   613  075B  00F4               	movwf	Lcd_Set_Cursor@b
   614  075C  3001               	movlw	1
   615  075D  120A  118A  268C  120A  118A  	fcall	_Lcd_Set_Cursor
   616                           
   617                           ;PIC_Master.c: 54: 
   618  0762  3005               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   619  0763  120A  118A  25FA  120A  118A  	fcall	_Lcd_Write_String
   620  0768                     l1076:
   621                           
   622                           ;PIC_Master.c: 55: 
   623  0768  300E               	movlw	14
   624  0769  00FB               	movwf	??_main
   625  076A  087B               	movf	??_main,w
   626  076B  00F4               	movwf	Lcd_Set_Cursor@b
   627  076C  3001               	movlw	1
   628  076D  120A  118A  268C  120A  118A  	fcall	_Lcd_Set_Cursor
   629  0772                     l1078:
   630                           
   631                           ;PIC_Master.c: 56: 
   632  0772  3009               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   633  0773  120A  118A  25FA  120A  118A  	fcall	_Lcd_Write_String
   634  0778                     l1080:
   635                           
   636                           ;PIC_Master.c: 65: 
   637  0778  1283               	bcf	3,5	;RP0=0, select bank0
   638  0779  1303               	bcf	3,6	;RP1=0, select bank0
   639  077A  1107               	bcf	7,2	;volatile
   640  077B                     l1082:
   641                           
   642                           ;PIC_Master.c: 66:     PORTA = 0;
   643  077B  3003               	movlw	3
   644  077C  00FC               	movwf	??_main+1
   645  077D  3097               	movlw	151
   646  077E  00FB               	movwf	??_main
   647  077F                     u257:
   648  077F  0BFB               	decfsz	??_main,f
   649  0780  2F7F               	goto	u257
   650  0781  0BFC               	decfsz	??_main+1,f
   651  0782  2F7F               	goto	u257
   652  0783  2F84               	nop2
   653  0784                     l1084:
   654                           
   655                           ;PIC_Master.c: 68:     PORTB = 0;
   656  0784  1283               	bcf	3,5	;RP0=0, select bank0
   657  0785  1303               	bcf	3,6	;RP1=0, select bank0
   658  0786  0806               	movf	6,w	;volatile
   659  0787  120A  118A  2585  120A  118A  	fcall	_spiWrite
   660  078C                     l1086:
   661                           
   662                           ;PIC_Master.c: 69:     TRISC = 0;
   663  078C  120A  118A  2592  120A  118A  	fcall	_spiRead
   664  0791  00FB               	movwf	??_main
   665  0792  087B               	movf	??_main,w
   666  0793  1283               	bcf	3,5	;RP0=0, select bank0
   667  0794  1303               	bcf	3,6	;RP1=0, select bank0
   668  0795  00A6               	movwf	_slave1
   669  0796                     l1088:
   670                           
   671                           ;PIC_Master.c: 71:     PORTC = 0;
   672  0796  3003               	movlw	3
   673  0797  00FC               	movwf	??_main+1
   674  0798  3097               	movlw	151
   675  0799  00FB               	movwf	??_main
   676  079A                     u267:
   677  079A  0BFB               	decfsz	??_main,f
   678  079B  2F9A               	goto	u267
   679  079C  0BFC               	decfsz	??_main+1,f
   680  079D  2F9A               	goto	u267
   681  079E  2F9F               	nop2
   682  079F                     l1090:
   683                           
   684                           ;PIC_Master.c: 72:     TRISD = 0;
   685  079F  1283               	bcf	3,5	;RP0=0, select bank0
   686  07A0  1303               	bcf	3,6	;RP1=0, select bank0
   687  07A1  1507               	bsf	7,2	;volatile
   688  07A2                     l1092:
   689                           
   690                           ;PIC_Master.c: 75:     PORTE = 0;
   691  07A2  1087               	bcf	7,1	;volatile
   692  07A3                     l1094:
   693                           
   694                           ;PIC_Master.c: 76:     INTCONbits.GIE = 1;
   695  07A3  3003               	movlw	3
   696  07A4  00FC               	movwf	??_main+1
   697  07A5  3097               	movlw	151
   698  07A6  00FB               	movwf	??_main
   699  07A7                     u277:
   700  07A7  0BFB               	decfsz	??_main,f
   701  07A8  2FA7               	goto	u277
   702  07A9  0BFC               	decfsz	??_main+1,f
   703  07AA  2FA7               	goto	u277
   704  07AB  2FAC               	nop2
   705  07AC                     l1096:
   706                           
   707                           ;PIC_Master.c: 78: 
   708  07AC  3001               	movlw	1
   709  07AD  120A  118A  2585  120A  118A  	fcall	_spiWrite
   710  07B2                     l1098:
   711                           
   712                           ;PIC_Master.c: 79:     contador = 0;
   713  07B2  120A  118A  2592  120A  118A  	fcall	_spiRead
   714  07B7  00FB               	movwf	??_main
   715  07B8  087B               	movf	??_main,w
   716  07B9  1283               	bcf	3,5	;RP0=0, select bank0
   717  07BA  1303               	bcf	3,6	;RP1=0, select bank0
   718  07BB  00A5               	movwf	_slave2
   719  07BC                     l1100:
   720                           
   721                           ;PIC_Master.c: 81: 
   722  07BC  3003               	movlw	3
   723  07BD  00FC               	movwf	??_main+1
   724  07BE  3097               	movlw	151
   725  07BF  00FB               	movwf	??_main
   726  07C0                     u287:
   727  07C0  0BFB               	decfsz	??_main,f
   728  07C1  2FC0               	goto	u287
   729  07C2  0BFC               	decfsz	??_main+1,f
   730  07C3  2FC0               	goto	u287
   731  07C4  2FC5               	nop2
   732  07C5                     l1102:
   733                           
   734                           ;PIC_Master.c: 82:     PORTCbits.RC2 = 1;
   735  07C5  1283               	bcf	3,5	;RP0=0, select bank0
   736  07C6  1303               	bcf	3,6	;RP1=0, select bank0
   737  07C7  1487               	bsf	7,1	;volatile
   738  07C8                     l1104:
   739                           
   740                           ;PIC_Master.c: 85:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_ID
      +                          LE_LOW, SPI_IDLE_2_ACTIVE);
   741  07C8  1007               	bcf	7,0	;volatile
   742  07C9                     l1106:
   743                           
   744                           ;PIC_Master.c: 86: 
   745  07C9  3003               	movlw	3
   746  07CA  00FC               	movwf	??_main+1
   747  07CB  3097               	movlw	151
   748  07CC  00FB               	movwf	??_main
   749  07CD                     u297:
   750  07CD  0BFB               	decfsz	??_main,f
   751  07CE  2FCD               	goto	u297
   752  07CF  0BFC               	decfsz	??_main+1,f
   753  07D0  2FCD               	goto	u297
   754  07D1  2FD2               	nop2
   755  07D2                     l1108:
   756                           
   757                           ;PIC_Master.c: 88: 
   758  07D2  3001               	movlw	1
   759  07D3  120A  118A  2585  120A  118A  	fcall	_spiWrite
   760  07D8                     l1110:
   761                           
   762                           ;PIC_Master.c: 89: }
   763  07D8  120A  118A  2592  120A  118A  	fcall	_spiRead
   764  07DD  00FB               	movwf	??_main
   765  07DE  087B               	movf	??_main,w
   766  07DF  1283               	bcf	3,5	;RP0=0, select bank0
   767  07E0  1303               	bcf	3,6	;RP1=0, select bank0
   768  07E1  00A4               	movwf	_slave3
   769  07E2                     l1112:
   770  07E2  3003               	movlw	3
   771  07E3  00FC               	movwf	??_main+1
   772  07E4  3097               	movlw	151
   773  07E5  00FB               	movwf	??_main
   774  07E6                     u307:
   775  07E6  0BFB               	decfsz	??_main,f
   776  07E7  2FE6               	goto	u307
   777  07E8  0BFC               	decfsz	??_main+1,f
   778  07E9  2FE6               	goto	u307
   779  07EA  2FEB               	nop2
   780  07EB                     l1114:
   781  07EB  1283               	bcf	3,5	;RP0=0, select bank0
   782  07EC  1303               	bcf	3,6	;RP1=0, select bank0
   783  07ED  1407               	bsf	7,0	;volatile
   784  07EE  2F78               	goto	l1080
   785  07EF  120A  118A  2800   	ljmp	start
   786  07F2                     __end_of_main:
   787                           
   788                           	psect	text1
   789  0585                     __ptext1:	
   790 ;; *************** function _spiWrite *****************
   791 ;; Defined at:
   792 ;;		line 34 in file "SPI.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;  dat             1    wreg     unsigned char 
   795 ;; Auto vars:     Size  Location     Type
   796 ;;  dat             1    0[COMMON] unsigned char 
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   806 ;;      Params:         0       0       0       0       0
   807 ;;      Locals:         1       0       0       0       0
   808 ;;      Temps:          0       0       0       0       0
   809 ;;      Totals:         1       0       0       0       0
   810 ;;Total ram usage:        1 bytes
   811 ;; Hardware stack levels used:    1
   812 ;; This function calls:
   813 ;;		Nothing
   814 ;; This function is called by:
   815 ;;		_main
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           
   820                           ;psect for function _spiWrite
   821  0585                     _spiWrite:
   822                           
   823                           ;incstack = 0
   824                           ; Regs used in _spiWrite: [wreg]
   825                           ;spiWrite@dat stored from wreg
   826  0585  00F0               	movwf	spiWrite@dat
   827  0586                     l1058:
   828                           
   829                           ;SPI.c: 34: void spiWrite(char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
   830  0586  0870               	movf	spiWrite@dat,w
   831  0587  1283               	bcf	3,5	;RP0=0, select bank0
   832  0588  1303               	bcf	3,6	;RP1=0, select bank0
   833  0589  0093               	movwf	19	;volatile
   834  058A                     l142:
   835  058A  0008               	return
   836  058B                     __end_of_spiWrite:
   837                           
   838                           	psect	text2
   839  0592                     __ptext2:	
   840 ;; *************** function _spiRead *****************
   841 ;; Defined at:
   842 ;;		line 47 in file "SPI.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;		None
   845 ;; Auto vars:     Size  Location     Type
   846 ;;		None
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      unsigned char 
   849 ;; Registers used:
   850 ;;		wreg, status,2, status,0, pclath, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   856 ;;      Params:         0       0       0       0       0
   857 ;;      Locals:         0       0       0       0       0
   858 ;;      Temps:          0       0       0       0       0
   859 ;;      Totals:         0       0       0       0       0
   860 ;;Total ram usage:        0 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:    1
   863 ;; This function calls:
   864 ;;		_spiReceiveWait
   865 ;; This function is called by:
   866 ;;		_main
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           
   871                           ;psect for function _spiRead
   872  0592                     _spiRead:
   873  0592                     l1060:	
   874                           ;incstack = 0
   875                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   876                           
   877                           
   878                           ;SPI.c: 49:     spiReceiveWait();
   879  0592  120A  118A  258B  120A  118A  	fcall	_spiReceiveWait
   880  0597                     l1062:
   881                           
   882                           ;SPI.c: 50:     return(SSPBUF);
   883  0597  1283               	bcf	3,5	;RP0=0, select bank0
   884  0598  1303               	bcf	3,6	;RP1=0, select bank0
   885  0599  0813               	movf	19,w	;volatile
   886  059A                     l150:
   887  059A  0008               	return
   888  059B                     __end_of_spiRead:
   889                           
   890                           	psect	text3
   891  058B                     __ptext3:	
   892 ;; *************** function _spiReceiveWait *****************
   893 ;; Defined at:
   894 ;;		line 29 in file "SPI.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;		None
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      void 
   901 ;; Registers used:
   902 ;;		None
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   908 ;;      Params:         0       0       0       0       0
   909 ;;      Locals:         0       0       0       0       0
   910 ;;      Temps:          0       0       0       0       0
   911 ;;      Totals:         0       0       0       0       0
   912 ;;Total ram usage:        0 bytes
   913 ;; Hardware stack levels used:    1
   914 ;; This function calls:
   915 ;;		Nothing
   916 ;; This function is called by:
   917 ;;		_spiRead
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           
   922                           ;psect for function _spiReceiveWait
   923  058B                     _spiReceiveWait:
   924  058B                     l982:	
   925                           ;incstack = 0
   926                           ; Regs used in _spiReceiveWait: []
   927                           
   928  058B                     l136:	
   929                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
   930                           
   931  058B  1683               	bsf	3,5	;RP0=1, select bank1
   932  058C  1303               	bcf	3,6	;RP1=0, select bank1
   933  058D  1C14               	btfss	20,0	;volatile
   934  058E  2D90               	goto	u191
   935  058F  2D91               	goto	u190
   936  0590                     u191:
   937  0590  2D8B               	goto	l136
   938  0591                     u190:
   939  0591                     l139:
   940  0591  0008               	return
   941  0592                     __end_of_spiReceiveWait:
   942                           
   943                           	psect	text4
   944  061F                     __ptext4:	
   945 ;; *************** function _setup *****************
   946 ;; Defined at:
   947 ;;		line 102 in file "PIC_Master.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;		None
   950 ;; Auto vars:     Size  Location     Type
   951 ;;		None
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg, status,2, status,0, pclath, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   961 ;;      Params:         0       0       0       0       0
   962 ;;      Locals:         0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0
   964 ;;      Totals:         0       0       0       0       0
   965 ;;Total ram usage:        0 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    1
   968 ;; This function calls:
   969 ;;		_spiInit
   970 ;; This function is called by:
   971 ;;		_main
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           
   976                           ;psect for function _setup
   977  061F                     _setup:
   978  061F                     l1024:	
   979                           ;incstack = 0
   980                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   981                           
   982  061F  1683               	bsf	3,5	;RP0=1, select bank3
   983  0620  1703               	bsf	3,6	;RP1=1, select bank3
   984  0621  0188               	clrf	8	;volatile
   985  0622  0189               	clrf	9	;volatile
   986  0623  1683               	bsf	3,5	;RP0=1, select bank1
   987  0624  1303               	bcf	3,6	;RP1=0, select bank1
   988  0625  0185               	clrf	5	;volatile
   989  0626  1283               	bcf	3,5	;RP0=0, select bank0
   990  0627  1303               	bcf	3,6	;RP1=0, select bank0
   991  0628  0185               	clrf	5	;volatile
   992  0629                     l1026:
   993  0629  3003               	movlw	3
   994  062A  1683               	bsf	3,5	;RP0=1, select bank1
   995  062B  1303               	bcf	3,6	;RP1=0, select bank1
   996  062C  0086               	movwf	6	;volatile
   997  062D                     l1028:
   998  062D  1283               	bcf	3,5	;RP0=0, select bank0
   999  062E  1303               	bcf	3,6	;RP1=0, select bank0
  1000  062F  0186               	clrf	6	;volatile
  1001  0630                     l1030:
  1002  0630  1683               	bsf	3,5	;RP0=1, select bank1
  1003  0631  1303               	bcf	3,6	;RP1=0, select bank1
  1004  0632  0187               	clrf	7	;volatile
  1005  0633                     l1032:
  1006  0633  1607               	bsf	7,4	;volatile
  1007  0634                     l1034:
  1008  0634  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0635  1303               	bcf	3,6	;RP1=0, select bank0
  1010  0636  0187               	clrf	7	;volatile
  1011  0637                     l1036:
  1012  0637  1683               	bsf	3,5	;RP0=1, select bank1
  1013  0638  1303               	bcf	3,6	;RP1=0, select bank1
  1014  0639  0188               	clrf	8	;volatile
  1015  063A                     l1038:
  1016  063A  1283               	bcf	3,5	;RP0=0, select bank0
  1017  063B  1303               	bcf	3,6	;RP1=0, select bank0
  1018  063C  0188               	clrf	8	;volatile
  1019  063D                     l1040:
  1020  063D  1683               	bsf	3,5	;RP0=1, select bank1
  1021  063E  1303               	bcf	3,6	;RP1=0, select bank1
  1022  063F  0189               	clrf	9	;volatile
  1023  0640                     l1042:
  1024  0640  1283               	bcf	3,5	;RP0=0, select bank0
  1025  0641  1303               	bcf	3,6	;RP1=0, select bank0
  1026  0642  0189               	clrf	9	;volatile
  1027  0643                     l1044:
  1028  0643  178B               	bsf	11,7	;volatile
  1029  0644                     l1046:
  1030  0644  170B               	bsf	11,6	;volatile
  1031  0645                     l1048:
  1032  0645  01FD               	clrf	_contador
  1033  0646                     l1050:
  1034  0646  1507               	bsf	7,2	;volatile
  1035  0647                     l1052:
  1036  0647  1487               	bsf	7,1	;volatile
  1037  0648                     l1054:
  1038  0648  1407               	bsf	7,0	;volatile
  1039  0649                     l1056:
  1040  0649  01F0               	clrf	spiInit@sDataSample
  1041  064A  01F1               	clrf	spiInit@sClockIdle
  1042  064B  01F2               	clrf	spiInit@sTransmitEdge
  1043  064C  3020               	movlw	32
  1044  064D  120A  118A  25A8  120A  118A  	fcall	_spiInit
  1045  0652                     l116:
  1046  0652  0008               	return
  1047  0653                     __end_of_setup:
  1048                           
  1049                           	psect	text5
  1050  05A8                     __ptext5:	
  1051 ;; *************** function _spiInit *****************
  1052 ;; Defined at:
  1053 ;;		line 12 in file "SPI.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;  sType           1    wreg     enum E1264
  1056 ;;  sDataSample     1    0[COMMON] enum E1272
  1057 ;;  sClockIdle      1    1[COMMON] enum E1276
  1058 ;;  sTransmitEdg    1    2[COMMON] enum E1280
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  sType           1    3[COMMON] enum E1264
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, status,2, status,0
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1070 ;;      Params:         3       0       0       0       0
  1071 ;;      Locals:         1       0       0       0       0
  1072 ;;      Temps:          0       0       0       0       0
  1073 ;;      Totals:         4       0       0       0       0
  1074 ;;Total ram usage:        4 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_setup
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           
  1084                           ;psect for function _spiInit
  1085  05A8                     _spiInit:
  1086                           
  1087                           ;incstack = 0
  1088                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1089                           ;spiInit@sType stored from wreg
  1090  05A8  00F3               	movwf	spiInit@sType
  1091  05A9                     l972:
  1092                           
  1093                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
  1094  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  1095  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  1096  05AB  1287               	bcf	7,5	;volatile
  1097                           
  1098                           ;SPI.c: 15:     if(sType & 0b00000100)
  1099  05AC  1D73               	btfss	spiInit@sType,2
  1100  05AD  2DAF               	goto	u181
  1101  05AE  2DB0               	goto	u180
  1102  05AF                     u181:
  1103  05AF  2DB4               	goto	l978
  1104  05B0                     u180:
  1105  05B0                     l974:
  1106                           
  1107                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
  1108  05B0  0872               	movf	spiInit@sTransmitEdge,w
  1109  05B1  0094               	movwf	20	;volatile
  1110  05B2                     l976:
  1111                           
  1112                           ;SPI.c: 18:         TRISC3 = 1;
  1113  05B2  1587               	bsf	7,3	;volatile
  1114                           
  1115                           ;SPI.c: 19:     }
  1116  05B3  2DB8               	goto	l132
  1117  05B4                     l978:
  1118                           
  1119                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  1120  05B4  0870               	movf	spiInit@sDataSample,w
  1121  05B5  0472               	iorwf	spiInit@sTransmitEdge,w
  1122  05B6  0094               	movwf	20	;volatile
  1123  05B7                     l980:
  1124                           
  1125                           ;SPI.c: 23:         TRISC3 = 0;
  1126  05B7  1187               	bcf	7,3	;volatile
  1127  05B8                     l132:	
  1128                           ;SPI.c: 24:     }
  1129                           
  1130                           
  1131                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
  1132  05B8  0873               	movf	spiInit@sType,w
  1133  05B9  0471               	iorwf	spiInit@sClockIdle,w
  1134  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  1135  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  1136  05BC  0094               	movwf	20	;volatile
  1137  05BD                     l133:
  1138  05BD  0008               	return
  1139  05BE                     __end_of_spiInit:
  1140                           
  1141                           	psect	text6
  1142  05FA                     __ptext6:	
  1143 ;; *************** function _Lcd_Write_String *****************
  1144 ;; Defined at:
  1145 ;;		line 99 in file "./lcd.h"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;  a               1    wreg     PTR unsigned char 
  1148 ;;		 -> STR_3(4), STR_2(4), STR_1(4), 
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;  a               1    7[COMMON] PTR unsigned char 
  1151 ;;		 -> STR_3(4), STR_2(4), STR_1(4), 
  1152 ;;  i               2    5[COMMON] int 
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  1    wreg      void 
  1155 ;; Registers used:
  1156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1162 ;;      Params:         0       0       0       0       0
  1163 ;;      Locals:         3       0       0       0       0
  1164 ;;      Temps:          0       0       0       0       0
  1165 ;;      Totals:         3       0       0       0       0
  1166 ;;Total ram usage:        3 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; Hardware stack levels required when called:    2
  1169 ;; This function calls:
  1170 ;;		_Lcd_Write_Char
  1171 ;; This function is called by:
  1172 ;;		_main
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           
  1177                           ;psect for function _Lcd_Write_String
  1178  05FA                     _Lcd_Write_String:
  1179                           
  1180                           ;incstack = 0
  1181                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1182                           ;Lcd_Write_String@a stored from wreg
  1183  05FA  00F7               	movwf	Lcd_Write_String@a
  1184  05FB                     l1016:
  1185                           
  1186                           ;./lcd.h: 99: void Lcd_Write_String(char *a);./lcd.h: 100: {;./lcd.h: 101:  int i;;./lcd
      +                          .h: 102:  for(i=0;a[i]!='\0';i++)
  1187  05FB  01F5               	clrf	Lcd_Write_String@i
  1188  05FC  01F6               	clrf	Lcd_Write_String@i+1
  1189  05FD  2E11               	goto	l1022
  1190  05FE                     l1018:
  1191                           
  1192                           ;./lcd.h: 103:     Lcd_Write_Char(a[i]);
  1193  05FE  0875               	movf	Lcd_Write_String@i,w
  1194  05FF  0777               	addwf	Lcd_Write_String@a,w
  1195  0600  0084               	movwf	4
  1196  0601  120A  118A  2003  120A  118A  	fcall	stringdir
  1197  0606  120A  118A  2653  120A  118A  	fcall	_Lcd_Write_Char
  1198  060B                     l1020:
  1199  060B  3001               	movlw	1
  1200  060C  07F5               	addwf	Lcd_Write_String@i,f
  1201  060D  1803               	skipnc
  1202  060E  0AF6               	incf	Lcd_Write_String@i+1,f
  1203  060F  3000               	movlw	0
  1204  0610  07F6               	addwf	Lcd_Write_String@i+1,f
  1205  0611                     l1022:
  1206  0611  0875               	movf	Lcd_Write_String@i,w
  1207  0612  0777               	addwf	Lcd_Write_String@a,w
  1208  0613  0084               	movwf	4
  1209  0614  120A  118A  2003  120A  118A  	fcall	stringdir
  1210  0619  3A00               	xorlw	0
  1211  061A  1D03               	skipz
  1212  061B  2E1D               	goto	u241
  1213  061C  2E1E               	goto	u240
  1214  061D                     u241:
  1215  061D  2DFE               	goto	l1018
  1216  061E                     u240:
  1217  061E                     l87:
  1218  061E  0008               	return
  1219  061F                     __end_of_Lcd_Write_String:
  1220                           
  1221                           	psect	text7
  1222  0653                     __ptext7:	
  1223 ;; *************** function _Lcd_Write_Char *****************
  1224 ;; Defined at:
  1225 ;;		line 83 in file "./lcd.h"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;  a               1    wreg     unsigned char 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  a               1    4[COMMON] unsigned char 
  1230 ;;  y               1    3[COMMON] unsigned char 
  1231 ;;  temp            1    2[COMMON] unsigned char 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      void 
  1234 ;; Registers used:
  1235 ;;		wreg, status,2, status,0, pclath, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1241 ;;      Params:         0       0       0       0       0
  1242 ;;      Locals:         3       0       0       0       0
  1243 ;;      Temps:          1       0       0       0       0
  1244 ;;      Totals:         4       0       0       0       0
  1245 ;;Total ram usage:        4 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    1
  1248 ;; This function calls:
  1249 ;;		_Lcd_Port
  1250 ;; This function is called by:
  1251 ;;		_Lcd_Write_String
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           
  1256                           ;psect for function _Lcd_Write_Char
  1257  0653                     _Lcd_Write_Char:
  1258                           
  1259                           ;incstack = 0
  1260                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1261                           ;Lcd_Write_Char@a stored from wreg
  1262  0653  00F4               	movwf	Lcd_Write_Char@a
  1263  0654                     l952:
  1264                           
  1265                           ;./lcd.h: 83: void Lcd_Write_Char(char a);./lcd.h: 84: {;./lcd.h: 85:    char temp,y;;./
      +                          lcd.h: 86:    temp = a&0x0F;
  1266  0654  0874               	movf	Lcd_Write_Char@a,w
  1267  0655  390F               	andlw	15
  1268  0656  00F1               	movwf	??_Lcd_Write_Char
  1269  0657  0871               	movf	??_Lcd_Write_Char,w
  1270  0658  00F2               	movwf	Lcd_Write_Char@temp
  1271                           
  1272                           ;./lcd.h: 87:    y = a&0xF0;
  1273  0659  0874               	movf	Lcd_Write_Char@a,w
  1274  065A  39F0               	andlw	240
  1275  065B  00F1               	movwf	??_Lcd_Write_Char
  1276  065C  0871               	movf	??_Lcd_Write_Char,w
  1277  065D  00F3               	movwf	Lcd_Write_Char@y
  1278  065E                     l954:
  1279                           
  1280                           ;./lcd.h: 88:    RD2 = 1;
  1281  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1282  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1283  0660  1508               	bsf	8,2	;volatile
  1284  0661                     l956:
  1285                           
  1286                           ;./lcd.h: 89:    Lcd_Port(y>>4);
  1287  0661  0873               	movf	Lcd_Write_Char@y,w
  1288  0662  00F1               	movwf	??_Lcd_Write_Char
  1289  0663  3004               	movlw	4
  1290  0664                     u175:
  1291  0664  1003               	clrc
  1292  0665  0CF1               	rrf	??_Lcd_Write_Char,f
  1293  0666  3EFF               	addlw	-1
  1294  0667  1D03               	skipz
  1295  0668  2E64               	goto	u175
  1296  0669  0871               	movf	??_Lcd_Write_Char,w
  1297  066A  120A  118A  25D8  120A  118A  	fcall	_Lcd_Port
  1298  066F                     l958:
  1299                           
  1300                           ;./lcd.h: 90:    RD3 = 1;
  1301  066F  1283               	bcf	3,5	;RP0=0, select bank0
  1302  0670  1303               	bcf	3,6	;RP1=0, select bank0
  1303  0671  1588               	bsf	8,3	;volatile
  1304  0672                     l960:
  1305                           
  1306                           ;./lcd.h: 91:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1307  0672  301A               	movlw	26
  1308  0673  00F1               	movwf	??_Lcd_Write_Char
  1309  0674                     u317:
  1310  0674  0BF1               	decfsz	??_Lcd_Write_Char,f
  1311  0675  2E74               	goto	u317
  1312  0676  0000               	nop
  1313  0677                     l962:
  1314                           
  1315                           ;./lcd.h: 92:    RD3 = 0;
  1316  0677  1283               	bcf	3,5	;RP0=0, select bank0
  1317  0678  1303               	bcf	3,6	;RP1=0, select bank0
  1318  0679  1188               	bcf	8,3	;volatile
  1319  067A                     l964:
  1320                           
  1321                           ;./lcd.h: 93:    Lcd_Port(temp);
  1322  067A  0872               	movf	Lcd_Write_Char@temp,w
  1323  067B  120A  118A  25D8  120A  118A  	fcall	_Lcd_Port
  1324  0680                     l966:
  1325                           
  1326                           ;./lcd.h: 94:    RD3 = 1;
  1327  0680  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0681  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0682  1588               	bsf	8,3	;volatile
  1330  0683                     l968:
  1331                           
  1332                           ;./lcd.h: 95:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1333  0683  301A               	movlw	26
  1334  0684  00F1               	movwf	??_Lcd_Write_Char
  1335  0685                     u327:
  1336  0685  0BF1               	decfsz	??_Lcd_Write_Char,f
  1337  0686  2E85               	goto	u327
  1338  0687  0000               	nop
  1339  0688                     l970:
  1340                           
  1341                           ;./lcd.h: 96:    RD3 = 0;
  1342  0688  1283               	bcf	3,5	;RP0=0, select bank0
  1343  0689  1303               	bcf	3,6	;RP1=0, select bank0
  1344  068A  1188               	bcf	8,3	;volatile
  1345  068B                     l81:
  1346  068B  0008               	return
  1347  068C                     __end_of_Lcd_Write_Char:
  1348                           
  1349                           	psect	text8
  1350  068C                     __ptext8:	
  1351 ;; *************** function _Lcd_Set_Cursor *****************
  1352 ;; Defined at:
  1353 ;;		line 43 in file "./lcd.h"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;  a               1    wreg     unsigned char 
  1356 ;;  b               1    4[COMMON] unsigned char 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  a               1    7[COMMON] unsigned char 
  1359 ;;  temp            1   10[COMMON] unsigned char 
  1360 ;;  y               1    9[COMMON] unsigned char 
  1361 ;;  z               1    8[COMMON] unsigned char 
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  1    wreg      void 
  1364 ;; Registers used:
  1365 ;;		wreg, status,2, status,0, pclath, cstack
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1371 ;;      Params:         1       0       0       0       0
  1372 ;;      Locals:         4       0       0       0       0
  1373 ;;      Temps:          2       0       0       0       0
  1374 ;;      Totals:         7       0       0       0       0
  1375 ;;Total ram usage:        7 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    2
  1378 ;; This function calls:
  1379 ;;		_Lcd_Cmd
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function _Lcd_Set_Cursor
  1387  068C                     _Lcd_Set_Cursor:
  1388                           
  1389                           ;incstack = 0
  1390                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1391                           ;Lcd_Set_Cursor@a stored from wreg
  1392  068C  00F7               	movwf	Lcd_Set_Cursor@a
  1393  068D                     l986:
  1394                           
  1395                           ;./lcd.h: 43: void Lcd_Set_Cursor(char a, char b);./lcd.h: 44: {;./lcd.h: 45:  char temp
      +                          ,z,y;;./lcd.h: 46:  if(a == 1)
  1396  068D  0377               	decf	Lcd_Set_Cursor@a,w
  1397  068E  1D03               	btfss	3,2
  1398  068F  2E91               	goto	u201
  1399  0690  2E92               	goto	u200
  1400  0691                     u201:
  1401  0691  2EB5               	goto	l996
  1402  0692                     u200:
  1403  0692                     l988:
  1404                           
  1405                           ;./lcd.h: 47:  {;./lcd.h: 48:    temp = 0x80 + b - 1;
  1406  0692  0874               	movf	Lcd_Set_Cursor@b,w
  1407  0693  3E7F               	addlw	127
  1408  0694  00F5               	movwf	??_Lcd_Set_Cursor
  1409  0695  0875               	movf	??_Lcd_Set_Cursor,w
  1410  0696  00FA               	movwf	Lcd_Set_Cursor@temp
  1411                           
  1412                           ;./lcd.h: 49:   z = temp>>4;
  1413  0697  087A               	movf	Lcd_Set_Cursor@temp,w
  1414  0698  00F5               	movwf	??_Lcd_Set_Cursor
  1415  0699  3004               	movlw	4
  1416  069A                     u215:
  1417  069A  1003               	clrc
  1418  069B  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1419  069C  3EFF               	addlw	-1
  1420  069D  1D03               	skipz
  1421  069E  2E9A               	goto	u215
  1422  069F  0875               	movf	??_Lcd_Set_Cursor,w
  1423  06A0  00F6               	movwf	??_Lcd_Set_Cursor+1
  1424  06A1  0876               	movf	??_Lcd_Set_Cursor+1,w
  1425  06A2  00F8               	movwf	Lcd_Set_Cursor@z
  1426  06A3                     l990:
  1427                           
  1428                           ;./lcd.h: 50:   y = temp & 0x0F;
  1429  06A3  087A               	movf	Lcd_Set_Cursor@temp,w
  1430  06A4  390F               	andlw	15
  1431  06A5  00F5               	movwf	??_Lcd_Set_Cursor
  1432  06A6  0875               	movf	??_Lcd_Set_Cursor,w
  1433  06A7  00F9               	movwf	Lcd_Set_Cursor@y
  1434  06A8                     l992:
  1435                           
  1436                           ;./lcd.h: 51:   Lcd_Cmd(z);
  1437  06A8  0878               	movf	Lcd_Set_Cursor@z,w
  1438  06A9  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1439  06AE                     l994:
  1440                           
  1441                           ;./lcd.h: 52:   Lcd_Cmd(y);
  1442  06AE  0879               	movf	Lcd_Set_Cursor@y,w
  1443  06AF  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1444                           
  1445                           ;./lcd.h: 53:  }
  1446  06B4  2EDD               	goto	l75
  1447  06B5                     l996:
  1448  06B5  3002               	movlw	2
  1449  06B6  0677               	xorwf	Lcd_Set_Cursor@a,w
  1450  06B7  1D03               	btfss	3,2
  1451  06B8  2EBA               	goto	u221
  1452  06B9  2EBB               	goto	u220
  1453  06BA                     u221:
  1454  06BA  2EDD               	goto	l75
  1455  06BB                     u220:
  1456  06BB                     l998:
  1457                           
  1458                           ;./lcd.h: 55:  {;./lcd.h: 56:   temp = 0xC0 + b - 1;
  1459  06BB  0874               	movf	Lcd_Set_Cursor@b,w
  1460  06BC  3EBF               	addlw	191
  1461  06BD  00F5               	movwf	??_Lcd_Set_Cursor
  1462  06BE  0875               	movf	??_Lcd_Set_Cursor,w
  1463  06BF  00FA               	movwf	Lcd_Set_Cursor@temp
  1464                           
  1465                           ;./lcd.h: 57:   z = temp>>4;
  1466  06C0  087A               	movf	Lcd_Set_Cursor@temp,w
  1467  06C1  00F5               	movwf	??_Lcd_Set_Cursor
  1468  06C2  3004               	movlw	4
  1469  06C3                     u235:
  1470  06C3  1003               	clrc
  1471  06C4  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1472  06C5  3EFF               	addlw	-1
  1473  06C6  1D03               	skipz
  1474  06C7  2EC3               	goto	u235
  1475  06C8  0875               	movf	??_Lcd_Set_Cursor,w
  1476  06C9  00F6               	movwf	??_Lcd_Set_Cursor+1
  1477  06CA  0876               	movf	??_Lcd_Set_Cursor+1,w
  1478  06CB  00F8               	movwf	Lcd_Set_Cursor@z
  1479  06CC                     l1000:
  1480                           
  1481                           ;./lcd.h: 58:   y = temp & 0x0F;
  1482  06CC  087A               	movf	Lcd_Set_Cursor@temp,w
  1483  06CD  390F               	andlw	15
  1484  06CE  00F5               	movwf	??_Lcd_Set_Cursor
  1485  06CF  0875               	movf	??_Lcd_Set_Cursor,w
  1486  06D0  00F9               	movwf	Lcd_Set_Cursor@y
  1487  06D1                     l1002:
  1488                           
  1489                           ;./lcd.h: 59:   Lcd_Cmd(z);
  1490  06D1  0878               	movf	Lcd_Set_Cursor@z,w
  1491  06D2  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1492  06D7                     l1004:
  1493                           
  1494                           ;./lcd.h: 60:   Lcd_Cmd(y);
  1495  06D7  0879               	movf	Lcd_Set_Cursor@y,w
  1496  06D8  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1497  06DD                     l75:
  1498  06DD  0008               	return
  1499  06DE                     __end_of_Lcd_Set_Cursor:
  1500                           
  1501                           	psect	text9
  1502  06DE                     __ptext9:	
  1503 ;; *************** function _Lcd_Init *****************
  1504 ;; Defined at:
  1505 ;;		line 64 in file "./lcd.h"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, status,2, status,0, pclath, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1519 ;;      Params:         0       0       0       0       0
  1520 ;;      Locals:         0       0       0       0       0
  1521 ;;      Temps:          2       0       0       0       0
  1522 ;;      Totals:         2       0       0       0       0
  1523 ;;Total ram usage:        2 bytes
  1524 ;; Hardware stack levels used:    1
  1525 ;; Hardware stack levels required when called:    2
  1526 ;; This function calls:
  1527 ;;		_Lcd_Cmd
  1528 ;;		_Lcd_Port
  1529 ;; This function is called by:
  1530 ;;		_main
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           
  1535                           ;psect for function _Lcd_Init
  1536  06DE                     _Lcd_Init:
  1537  06DE                     l1006:	
  1538                           ;incstack = 0
  1539                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1540                           
  1541                           
  1542                           ;./lcd.h: 66:   Lcd_Port(0x00);
  1543  06DE  3000               	movlw	0
  1544  06DF  120A  118A  25D8  120A  118A  	fcall	_Lcd_Port
  1545  06E4                     l1008:
  1546                           
  1547                           ;./lcd.h: 67:    _delay((unsigned long)((20)*(8000000/4000.0)));
  1548  06E4  3034               	movlw	52
  1549  06E5  00F5               	movwf	??_Lcd_Init+1
  1550  06E6  30F1               	movlw	241
  1551  06E7  00F4               	movwf	??_Lcd_Init
  1552  06E8                     u337:
  1553  06E8  0BF4               	decfsz	??_Lcd_Init,f
  1554  06E9  2EE8               	goto	u337
  1555  06EA  0BF5               	decfsz	??_Lcd_Init+1,f
  1556  06EB  2EE8               	goto	u337
  1557  06EC  2EED               	nop2
  1558  06ED                     l1010:
  1559                           
  1560                           ;./lcd.h: 68:   Lcd_Cmd(0x03);
  1561  06ED  3003               	movlw	3
  1562  06EE  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1563                           
  1564                           ;./lcd.h: 69:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1565  06F3  300D               	movlw	13
  1566  06F4  00F5               	movwf	??_Lcd_Init+1
  1567  06F5  30FB               	movlw	251
  1568  06F6  00F4               	movwf	??_Lcd_Init
  1569  06F7                     u347:
  1570  06F7  0BF4               	decfsz	??_Lcd_Init,f
  1571  06F8  2EF7               	goto	u347
  1572  06F9  0BF5               	decfsz	??_Lcd_Init+1,f
  1573  06FA  2EF7               	goto	u347
  1574  06FB  2EFC               	nop2
  1575  06FC                     l1012:
  1576                           
  1577                           ;./lcd.h: 70:   Lcd_Cmd(0x03);
  1578  06FC  3003               	movlw	3
  1579  06FD  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1580  0702                     l1014:
  1581                           
  1582                           ;./lcd.h: 71:  _delay((unsigned long)((11)*(8000000/4000.0)));
  1583  0702  301D               	movlw	29
  1584  0703  00F5               	movwf	??_Lcd_Init+1
  1585  0704  3091               	movlw	145
  1586  0705  00F4               	movwf	??_Lcd_Init
  1587  0706                     u357:
  1588  0706  0BF4               	decfsz	??_Lcd_Init,f
  1589  0707  2F06               	goto	u357
  1590  0708  0BF5               	decfsz	??_Lcd_Init+1,f
  1591  0709  2F06               	goto	u357
  1592                           
  1593                           ;./lcd.h: 72:   Lcd_Cmd(0x03);
  1594  070A  3003               	movlw	3
  1595  070B  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1596                           
  1597                           ;./lcd.h: 74:   Lcd_Cmd(0x02);
  1598  0710  3002               	movlw	2
  1599  0711  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1600                           
  1601                           ;./lcd.h: 75:   Lcd_Cmd(0x02);
  1602  0716  3002               	movlw	2
  1603  0717  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1604                           
  1605                           ;./lcd.h: 76:   Lcd_Cmd(0x08);
  1606  071C  3008               	movlw	8
  1607  071D  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1608                           
  1609                           ;./lcd.h: 77:   Lcd_Cmd(0x00);
  1610  0722  3000               	movlw	0
  1611  0723  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1612                           
  1613                           ;./lcd.h: 78:   Lcd_Cmd(0x0C);
  1614  0728  300C               	movlw	12
  1615  0729  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1616                           
  1617                           ;./lcd.h: 79:   Lcd_Cmd(0x00);
  1618  072E  3000               	movlw	0
  1619  072F  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1620                           
  1621                           ;./lcd.h: 80:   Lcd_Cmd(0x06);
  1622  0734  3006               	movlw	6
  1623  0735  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1624  073A                     l78:
  1625  073A  0008               	return
  1626  073B                     __end_of_Lcd_Init:
  1627                           
  1628                           	psect	text10
  1629  059B                     __ptext10:	
  1630 ;; *************** function _Lcd_Clear *****************
  1631 ;; Defined at:
  1632 ;;		line 37 in file "./lcd.h"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;		None
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;		None
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  2   68[None  ] int 
  1639 ;; Registers used:
  1640 ;;		wreg, status,2, status,0, pclath, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1646 ;;      Params:         0       0       0       0       0
  1647 ;;      Locals:         0       0       0       0       0
  1648 ;;      Temps:          0       0       0       0       0
  1649 ;;      Totals:         0       0       0       0       0
  1650 ;;Total ram usage:        0 bytes
  1651 ;; Hardware stack levels used:    1
  1652 ;; Hardware stack levels required when called:    2
  1653 ;; This function calls:
  1654 ;;		_Lcd_Cmd
  1655 ;; This function is called by:
  1656 ;;		_main
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           
  1661                           ;psect for function _Lcd_Clear
  1662  059B                     _Lcd_Clear:
  1663  059B                     l984:	
  1664                           ;incstack = 0
  1665                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1666                           
  1667                           
  1668                           ;./lcd.h: 39:  Lcd_Cmd(0);
  1669  059B  3000               	movlw	0
  1670  059C  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1671                           
  1672                           ;./lcd.h: 40:  Lcd_Cmd(1);
  1673  05A1  3001               	movlw	1
  1674  05A2  120A  118A  25BE  120A  118A  	fcall	_Lcd_Cmd
  1675  05A7                     l69:
  1676  05A7  0008               	return
  1677  05A8                     __end_of_Lcd_Clear:
  1678                           
  1679                           	psect	text11
  1680  05BE                     __ptext11:	
  1681 ;; *************** function _Lcd_Cmd *****************
  1682 ;; Defined at:
  1683 ;;		line 28 in file "./lcd.h"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;  a               1    wreg     unsigned char 
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;  a               1    3[COMMON] unsigned char 
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg, status,2, status,0, pclath, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1697 ;;      Params:         0       0       0       0       0
  1698 ;;      Locals:         1       0       0       0       0
  1699 ;;      Temps:          2       0       0       0       0
  1700 ;;      Totals:         3       0       0       0       0
  1701 ;;Total ram usage:        3 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    1
  1704 ;; This function calls:
  1705 ;;		_Lcd_Port
  1706 ;; This function is called by:
  1707 ;;		_Lcd_Clear
  1708 ;;		_Lcd_Set_Cursor
  1709 ;;		_Lcd_Init
  1710 ;;		_Lcd_Shift_Right
  1711 ;;		_Lcd_Shift_Left
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           
  1716                           ;psect for function _Lcd_Cmd
  1717  05BE                     _Lcd_Cmd:
  1718                           
  1719                           ;incstack = 0
  1720                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1721                           ;Lcd_Cmd@a stored from wreg
  1722  05BE  00F3               	movwf	Lcd_Cmd@a
  1723  05BF                     l942:
  1724                           
  1725                           ;./lcd.h: 28: void Lcd_Cmd(char a);./lcd.h: 29: {;./lcd.h: 30:  RD2 = 0;
  1726  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  1727  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  1728  05C1  1108               	bcf	8,2	;volatile
  1729  05C2                     l944:
  1730                           
  1731                           ;./lcd.h: 31:  Lcd_Port(a);
  1732  05C2  0873               	movf	Lcd_Cmd@a,w
  1733  05C3  120A  118A  25D8  120A  118A  	fcall	_Lcd_Port
  1734  05C8                     l946:
  1735                           
  1736                           ;./lcd.h: 32:  RD3 = 1;
  1737  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  1738  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  1739  05CA  1588               	bsf	8,3	;volatile
  1740  05CB                     l948:
  1741                           
  1742                           ;./lcd.h: 33:         _delay((unsigned long)((4)*(8000000/4000.0)));
  1743  05CB  300B               	movlw	11
  1744  05CC  00F2               	movwf	??_Lcd_Cmd+1
  1745  05CD  3062               	movlw	98
  1746  05CE  00F1               	movwf	??_Lcd_Cmd
  1747  05CF                     u367:
  1748  05CF  0BF1               	decfsz	??_Lcd_Cmd,f
  1749  05D0  2DCF               	goto	u367
  1750  05D1  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1751  05D2  2DCF               	goto	u367
  1752  05D3  0000               	nop
  1753  05D4                     l950:
  1754                           
  1755                           ;./lcd.h: 34:         RD3 = 0;
  1756  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  1757  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  1758  05D6  1188               	bcf	8,3	;volatile
  1759  05D7                     l66:
  1760  05D7  0008               	return
  1761  05D8                     __end_of_Lcd_Cmd:
  1762                           
  1763                           	psect	text12
  1764  05D8                     __ptext12:	
  1765 ;; *************** function _Lcd_Port *****************
  1766 ;; Defined at:
  1767 ;;		line 6 in file "./lcd.h"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  a               1    wreg     unsigned char 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  a               1    0[COMMON] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1781 ;;      Params:         0       0       0       0       0
  1782 ;;      Locals:         1       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0
  1784 ;;      Totals:         1       0       0       0       0
  1785 ;;Total ram usage:        1 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_Lcd_Cmd
  1791 ;;		_Lcd_Init
  1792 ;;		_Lcd_Write_Char
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           
  1797                           ;psect for function _Lcd_Port
  1798  05D8                     _Lcd_Port:
  1799                           
  1800                           ;incstack = 0
  1801                           ; Regs used in _Lcd_Port: [wreg]
  1802                           ;Lcd_Port@a stored from wreg
  1803  05D8  00F0               	movwf	Lcd_Port@a
  1804  05D9                     l932:
  1805                           
  1806                           ;./lcd.h: 6: void Lcd_Port(char a);./lcd.h: 7: {;./lcd.h: 8:  if(a & 1)
  1807  05D9  1C70               	btfss	Lcd_Port@a,0
  1808  05DA  2DDC               	goto	u131
  1809  05DB  2DDD               	goto	u130
  1810  05DC                     u131:
  1811  05DC  2DE1               	goto	l55
  1812  05DD                     u130:
  1813  05DD                     l934:
  1814                           
  1815                           ;./lcd.h: 9:   RD4 = 1;
  1816  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  1817  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  1818  05DF  1608               	bsf	8,4	;volatile
  1819  05E0  2DE4               	goto	l56
  1820  05E1                     l55:	
  1821                           ;./lcd.h: 10:  else
  1822                           
  1823                           
  1824                           ;./lcd.h: 11:   RD4 = 0;
  1825  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  1826  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  1827  05E3  1208               	bcf	8,4	;volatile
  1828  05E4                     l56:
  1829                           
  1830                           ;./lcd.h: 13:  if(a & 2)
  1831  05E4  1CF0               	btfss	Lcd_Port@a,1
  1832  05E5  2DE7               	goto	u141
  1833  05E6  2DE8               	goto	u140
  1834  05E7                     u141:
  1835  05E7  2DEA               	goto	l57
  1836  05E8                     u140:
  1837  05E8                     l936:
  1838                           
  1839                           ;./lcd.h: 14:   RD5 = 1;
  1840  05E8  1688               	bsf	8,5	;volatile
  1841  05E9  2DEB               	goto	l58
  1842  05EA                     l57:	
  1843                           ;./lcd.h: 15:  else
  1844                           
  1845                           
  1846                           ;./lcd.h: 16:   RD5 = 0;
  1847  05EA  1288               	bcf	8,5	;volatile
  1848  05EB                     l58:
  1849                           
  1850                           ;./lcd.h: 18:  if(a & 4)
  1851  05EB  1D70               	btfss	Lcd_Port@a,2
  1852  05EC  2DEE               	goto	u151
  1853  05ED  2DEF               	goto	u150
  1854  05EE                     u151:
  1855  05EE  2DF1               	goto	l59
  1856  05EF                     u150:
  1857  05EF                     l938:
  1858                           
  1859                           ;./lcd.h: 19:   RD6 = 1;
  1860  05EF  1708               	bsf	8,6	;volatile
  1861  05F0  2DF2               	goto	l60
  1862  05F1                     l59:	
  1863                           ;./lcd.h: 20:  else
  1864                           
  1865                           
  1866                           ;./lcd.h: 21:   RD6 = 0;
  1867  05F1  1308               	bcf	8,6	;volatile
  1868  05F2                     l60:
  1869                           
  1870                           ;./lcd.h: 23:  if(a & 8)
  1871  05F2  1DF0               	btfss	Lcd_Port@a,3
  1872  05F3  2DF5               	goto	u161
  1873  05F4  2DF6               	goto	u160
  1874  05F5                     u161:
  1875  05F5  2DF8               	goto	l61
  1876  05F6                     u160:
  1877  05F6                     l940:
  1878                           
  1879                           ;./lcd.h: 24:   RD7 = 1;
  1880  05F6  1788               	bsf	8,7	;volatile
  1881  05F7  2DF9               	goto	l63
  1882  05F8                     l61:	
  1883                           ;./lcd.h: 25:  else
  1884                           
  1885                           
  1886                           ;./lcd.h: 26:   RD7 = 0;
  1887  05F8  1388               	bcf	8,7	;volatile
  1888  05F9                     l63:
  1889  05F9  0008               	return
  1890  05FA                     __end_of_Lcd_Port:
  1891  007E                     btemp	set	126	;btemp
  1892  007E                     wtemp0	set	126
  1893                           
  1894                           	psect	config
  1895                           
  1896                           ;Config register CONFIG1 @ 0x2007
  1897                           ;	Oscillator Selection bits
  1898                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1899                           ;	Watchdog Timer Enable bit
  1900                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1901                           ;	Power-up Timer Enable bit
  1902                           ;	PWRTE = OFF, PWRT disabled
  1903                           ;	RE3/MCLR pin function select bit
  1904                           ;	MCLRE = 0x1, unprogrammed default
  1905                           ;	Code Protection bit
  1906                           ;	CP = OFF, Program memory code protection is disabled
  1907                           ;	Data Code Protection bit
  1908                           ;	CPD = OFF, Data memory code protection is disabled
  1909                           ;	Brown Out Reset Selection bits
  1910                           ;	BOREN = ON, BOR enabled
  1911                           ;	Internal External Switchover bit
  1912                           ;	IESO = 0x1, unprogrammed default
  1913                           ;	Fail-Safe Clock Monitor Enabled bit
  1914                           ;	FCMEN = 0x1, unprogrammed default
  1915                           ;	Low Voltage Programming Enable bit
  1916                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1917                           ;	In-Circuit Debugger Mode bit
  1918                           ;	DEBUG = 0x1, unprogrammed default
  1919  2007                     	org	8199
  1920  2007  2FF2               	dw	12274
  1921                           
  1922                           ;Config register CONFIG2 @ 0x2008
  1923                           ;	Brown-out Reset Selection bit
  1924                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1925                           ;	Flash Program Memory Self Write Enable bits
  1926                           ;	WRT = OFF, Write protection off
  1927  2008                     	org	8200
  1928  2008  3FFF               	dw	16383

Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      0       7
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _setup->_spiInit
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1665
                                             11 COMMON     2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _setup
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     367
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     608
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      15       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       7       5        8.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      15      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 23 16:26:16 2021

                        _t 0020                          pc 0002                _SSPSTATbits 0094  
                       l60 05F2                         l61 05F8                         l63 05F9  
                       l55 05E1                         l56 05E4                         l57 05EA  
                       l81 068B                         l58 05EB                         l66 05D7  
                       l59 05F1                         l75 06DD                         _S1 0022  
                       l69 05A7                         l78 073A                         l87 061E  
                       fsr 0004                        l132 05B8                        l116 0652  
                      l133 05BD                        l150 059A                        l142 058A  
                      l136 058B                        l139 0591                        l940 05F6  
                      l932 05D9                        l934 05DD                        l950 05D4  
                      l942 05BF                        l936 05E8                        l944 05C2  
                      l960 0672                        l952 0654                        l938 05EF  
                      l946 05C8                        l970 0688                        l962 0677  
                      l954 065E                        l948 05CB                        l964 067A  
                      l956 0661                        l980 05B7                        l972 05A9  
                      l990 06A3                        l966 0680                        l958 066F  
                      l974 05B0                        l982 058B                        l984 059B  
                      l992 06A8                        l968 0683                        l976 05B2  
                      l994 06AE                        l986 068D                        l978 05B4  
                      l988 0692                        l996 06B5                        l998 06BB  
                      _RD2 0042                        _RD3 0043                        _RD4 0044  
                      _RD5 0045                        _RD6 0046                        _RD7 0047  
                      u200 0692                        u201 0691                        u130 05DD  
                      u131 05DC                        u140 05E8                        u220 06BB  
                      u141 05E7                        u221 06BA                        u150 05EF  
                      u151 05EE                        u215 069A                        u160 05F6  
                      u240 061E                        u161 05F5                        u241 061D  
                      u235 06C3                        u307 07E6                        u180 05B0  
                      u317 0674                        u181 05AF                        u190 0591  
                      u327 0685                        u175 0664                        u191 0590  
                      u337 06E8                        u257 077F                        u347 06F7  
                      u267 079A                        u357 0706                        u277 07A7  
                      u367 05CF                        u287 07C0                        u297 07CD  
                      fsr0 0004                       l1000 06CC                       l1010 06ED  
                     l1002 06D1                       l1012 06FC                       l1004 06D7  
                     l1020 060B                       l1100 07BC                       l1014 0702  
                     l1006 06DE                       l1022 0611                       l1030 0630  
                     l1110 07D8                       l1102 07C5                       l1008 06E4  
                     l1016 05FB                       l1040 063D                       l1032 0633  
                     l1024 061F                       l1112 07E2                       l1104 07C8  
                     l1018 05FE                       l1050 0646                       l1042 0640  
                     l1034 0634                       l1026 0629                       l1114 07EB  
                     l1106 07C9                       l1052 0647                       l1044 0643  
                     l1036 0637                       l1028 062D                       l1060 0592  
                     l1108 07D2                       l1054 0648                       l1046 0644  
                     l1038 063A                       l1062 0597                       l1070 073B  
                     l1056 0649                       l1048 0645                       l1080 0778  
                     l1072 0752                       l1058 0586                       l1090 079F  
                     l1082 077B                       l1074 0758                       l1092 07A2  
                     l1084 0784                       l1076 0768                       l1094 07A3  
                     l1086 078C                       l1078 0772                       l1096 07AC  
                     l1088 0796                       l1098 07B2                       STR_1 0009  
                     STR_2 000D                       STR_3 0011          ?_Lcd_Write_String 0070  
                     _main 073B                       btemp 007E                       start 0000  
       ??_Lcd_Write_String 0075            __end_of_Lcd_Cmd 05D8                      ?_main 0070  
                    _ANSEL 0188                      _PORTA 0005                      _PORTB 0006  
                    _PORTC 0007                      _PORTD 0008                      _PORTE 0009  
  __size_of_Lcd_Set_Cursor 0052                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087                      _TRISD 0088                      _TRISE 0089  
                    _setup 061F                      pclath 000A            __end_of_spiInit 05BE  
          __end_of_spiRead 059B                      status 0003                      wtemp0 007E  
         __end_of_Lcd_Init 073B           __end_of_Lcd_Port 05FA            __initialization 07F2  
             __end_of_main 07F2                     ??_main 007B         __size_of_Lcd_Clear 000D  
                   ?_setup 0070                     _ANSELH 0189                  ??_Lcd_Cmd 0071  
  __size_of_Lcd_Write_Char 0039                     _TRISC3 043B                     _TRISC5 043D  
                   _SSPCON 0014                     _SSPBUF 0013                     _slave1 0026  
                   _slave2 0025                     _slave3 0024           __end_of_spiWrite 058B  
                ??_spiInit 0073                  ??_spiRead 0070            Lcd_Set_Cursor@a 0077  
          Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078  
  __end_of__initialization 07FC          __end_of_Lcd_Clear 05A8             __pcstackCOMMON 0070  
            __end_of_setup 0653             _Lcd_Set_Cursor 068C                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                    ??_setup 0074                 __pbssBANK0 0020  
               __pmaintext 073B    __size_of_spiReceiveWait 0007  __size_of_Lcd_Write_String 0025  
   __end_of_Lcd_Set_Cursor 06DE                 ??_Lcd_Init 0074                 ??_Lcd_Port 0070  
                  _SSPSTAT 0094                 __stringtab 0003             _Lcd_Write_Char 0653  
                  _Lcd_Cmd 05BE                  ?_spiWrite 0070            ?_Lcd_Set_Cursor 0074  
                  __ptext1 0585                    __ptext2 0592                    __ptext3 058B  
                  __ptext4 061F                    __ptext5 05A8                    __ptext6 05FA  
                  __ptext7 0653                    __ptext8 068C                    __ptext9 06DE  
                  _spiInit 05A8                    _spiRead 0592     __end_of_Lcd_Write_Char 068C  
     end_of_initialization 07FC                 ??_spiWrite 0070                  Lcd_Port@a 0070  
                _PORTCbits 0007                  _TRISCbits 0087                spiWrite@dat 0070  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077          Lcd_Write_String@i 0075  
                _Lcd_Clear 059B             _spiReceiveWait 058B           _Lcd_Write_String 05FA  
      start_initialization 07F2          __size_of_Lcd_Init 005D          __size_of_Lcd_Port 0022  
   __end_of_spiReceiveWait 0592                 ?_Lcd_Clear 0070            Lcd_Write_Char@a 0074  
          Lcd_Write_Char@y 0073                __pbssCOMMON 007D                  ___latbits 0002  
                 ?_Lcd_Cmd 0070            ?_spiReceiveWait 0070           ??_Lcd_Set_Cursor 0075  
        __size_of_spiWrite 0006                  __pstrings 0003                   ?_spiInit 0070  
                 ?_spiRead 0070             __size_of_setup 0034       spiInit@sTransmitEdge 0072  
       spiInit@sDataSample 0070                   Lcd_Cmd@a 0073                ??_Lcd_Clear 0074  
              __stringbase 0008           ??_Lcd_Write_Char 0071                   _Lcd_Init 06DE  
                 _Lcd_Port 05D8   __end_of_Lcd_Write_String 061F           __size_of_Lcd_Cmd 001A  
       __end_of__stringtab 0009                   __ptext10 059B                   __ptext11 05BE  
                 __ptext12 05D8           __size_of_spiInit 0016           __size_of_spiRead 0009  
                 _contador 007D              __size_of_main 00B7                   _spiWrite 0585  
             spiInit@sType 0073          spiInit@sClockIdle 0071                 _INTCONbits 000B  
       Lcd_Write_Char@temp 0072           ??_spiReceiveWait 0070                  stringcode 0003  
       Lcd_Set_Cursor@temp 007A                   stringdir 0003                   stringtab 0003  
